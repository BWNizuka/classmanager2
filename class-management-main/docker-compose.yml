# Development Docker Compose Configuration
version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: class-management-backend-dev
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - APP_ENV=development
      - API_DEBUG=true
      - ENABLE_RELOAD=true
    depends_on:
      - mongodb
      - redis
    networks:
      - class-management-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Streamlit Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    container_name: class-management-frontend-dev
    ports:
      - "8501:8501"
    volumes:
      - ./frontend:/app/frontend
    env_file:
      - .env
    environment:
      - BACKEND_API_URL=http://backend:8000
    depends_on:
      - backend
    networks:
      - class-management-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Service
  mongodb:
    image: mongo:7.0
    container_name: class-management-mongodb-dev
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: class_management
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - class-management-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Service (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: class-management-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - class-management-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Development)
  nginx:
    image: nginx:alpine
    container_name: class-management-nginx-dev
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - class-management-network
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  class-management-network:
    driver: bridge